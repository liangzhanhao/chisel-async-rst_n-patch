diff --git a/src/main/scala/firrtl/backends/verilog/VerilogEmitter.scala b/src/main/scala/firrtl/backends/verilog/VerilogEmitter.scala
index 3ecd1279..ef53ca1f 100644
--- a/src/main/scala/firrtl/backends/verilog/VerilogEmitter.scala
+++ b/src/main/scala/firrtl/backends/verilog/VerilogEmitter.scala
@@ -729,8 +729,20 @@ class VerilogEmitter extends SeqTransform with Emitter {
                 case AsyncResetType => (_if +: _true :+ _else) ++ _true :+ _end
                 case _              => _if +: _true :+ _end
               }
-            case (_, _: Mux) => (_if +: _true) ++ _elseIfFalse
-            case _ => (_if +: _true :+ _else) ++ _false :+ _end
+            //case (_, _: Mux) => (_if +: _true) ++ _elseIfFalse
+            //case _ => (_if +: _true :+ _else) ++ _false :+ _end
+            //for negegde reset
+            case (_, _: Mux) =>
+              m.cond.tpe match {
+                case AsyncResetType => (_ifNot +: _true) ++ _elseIfFalse
+                case _              => (_if    +: _true) ++ _elseIfFalse
+              }
+            case _ =>
+              m.cond.tpe match {
+                case AsyncResetType => (_ifNot +: _true :+ _else) ++ _false :+ _end
+                case _              => (_if    +: _true :+ _else) ++ _false :+ _end
+              }
+            //for negedge reset
           }
         case e => Seq(Seq(tabs, r, " <= ", e, ";", info))
       }
@@ -787,7 +799,8 @@ class VerilogEmitter extends SeqTransform with Emitter {
       ifdefInitials("RANDOMIZE_REG_INIT") += Seq(e, " = ", randString, ";")
       reset.tpe match {
         case AsyncResetType =>
-          asyncInitials += Seq("if (", reset, ") begin")
+          //asyncInitials += Seq("if (", reset, ") begin")
+          asyncInitials += Seq("if (!", reset, ") begin") //for negedge reset
           asyncInitials += Seq(tab, e, " = ", init, ";")
           asyncInitials += Seq("end")
         case _ => // do nothing
@@ -1122,7 +1135,8 @@ class VerilogEmitter extends SeqTransform with Emitter {
       }
 
       for ((clk, reset, content) <- asyncResetAlwaysBlocks if content.nonEmpty) {
-        emit(Seq(tab, "always @(posedge ", clk, " or posedge ", reset, ") begin"))
+        //emit(Seq(tab, "always @(posedge ", clk, " or posedge ", reset, ") begin"))
+        emit(Seq(tab, "always @(posedge ", clk, " or negedge ", reset, ") begin"))  //for negedge reset
         for (line <- content) emit(Seq(tab, tab, line))
         emit(Seq(tab, "end"))
       }
